Parameters:
  VPCStack:
    Description: 'VPC stack name'
    Type: String
    Default: 'vpcStack'
  InstanceType:
    Description: 'EC2 instance type'
    Type: String
    Default: 't2.micro'
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: 'Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.'
    Default: 'madhav'
  MaxSize:
    Type: String
    Default: '1'
    Description: Maximum number of instances that can be launched in your ECS cluster. 
  DesiredCapacity:
    Type: String
    Default: '1'
    Description: 'Number of instances to launch in your ECS cluster.'
  BackendContainerImage:
    Type: String
    MinLength: 1
    Default: '369888207781.dkr.ecr.us-east-1.amazonaws.com/madhavecr:latest'
Mappings: 
  AWSRegionToAMI:
    us-east-1: 
      AMIID: "ami-0fac5486e4cff37f4"
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId:
        Fn::ImportValue: !Sub "${VPCStack}-VPC"
  EcsSecurityGroupEmphemeralTraffic:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '31000'
      ToPort: '61000'
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
  EcsSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      SourceSecurityGroupId:
        Fn::ImportValue: !Sub "${VPCStack}-BastionSecurityGroupId"
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "LBSecurityGroup"
      GroupDescription: Load Balancer Security Group
      VpcId:
        Fn::ImportValue: !Sub "${VPCStack}-VPC"
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession', 'ecs:UpdateContainerInstancesState',
              'ecs:Submit*', 'ecr:GetAuthorizationToken', 'ecr:BatchCheckLayerAvailability', 'ecr:GetDownloadUrlForLayer', 'ecr:BatchGetImage',
              'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroups: [!Ref 'EcsSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      KeyName: !Ref 'KeyName'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config;
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${VPCStack}-PrivateSubnetA"
        - Fn::ImportValue: !Sub "${VPCStack}-PrivateSubnetB"
        - Fn::ImportValue: !Sub "${VPCStack}-PrivateSubnetC"
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
      Tags:
        - Key: Name
          Value: !Sub '${InstanceType}'
          PropagateAtLaunch: true
  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: 'madhav-ecs-alb'
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '20'
      Subnets:
        - Fn::ImportValue: !Sub "${VPCStack}-PublicSubnetA"
        - Fn::ImportValue: !Sub "${VPCStack}-PublicSubnetB"
        - Fn::ImportValue: !Sub "${VPCStack}-PublicSubnetC"
      SecurityGroups: [!Ref 'LoadBalancerSecurityGroup']
      Tags:
       - Key: Project
         Value: 'madhav-ecs-cfn'
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      LoadBalancerArn: !Ref 'ECSALB'
      Port: 80
      Protocol: HTTP
  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'ALBListener'
      Priority: 1
  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /users/users
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: 'ecs-tgt-gp'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
       Fn::ImportValue: !Sub "${VPCStack}-VPC"
      Tags:
        - Key: Project
          Value: 'madhav'  
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 7
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 'ecs-node-task'
      ContainerDefinitions:
      - Name: 'ecs-node-container'
        Cpu: 400
        Essential: 'true'
        Image: !Ref BackendContainerImage
        Memory: 400
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: 'madhav-ecs'
        PortMappings:
          - ContainerPort: 3000
  service:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: '2'
      LoadBalancers:
      - ContainerName : 'ecs-node-container'
        ContainerPort: 3000
        TargetGroupArn: !Ref 'ECSTG'
      Role: !Ref 'ECSServiceRole'
      TaskDefinition: !Ref 'BackendTaskDefinition'
      DeploymentConfiguration:
        MaximumPercent: 150
        MinimumHealthyPercent: 50
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
            Resource: '*'
